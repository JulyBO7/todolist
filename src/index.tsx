import ReactDOM from 'react-dom/client';
import './index.css';
import AppWithRedux from './app/App';
import { store } from './app/store';
import { Provider } from 'react-redux';
import { BrowserRouter } from 'react-router-dom';


const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <BrowserRouter>
    <Provider store={store}>
      <AppWithRedux />
    </Provider>
  </BrowserRouter>

);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals




// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes, useNavigate, useParams } from 'react-router-dom'
// import React from 'react'

// type UserType = {
//   id: number
//   name: string
//   avatar: string
//   age: number
//   address: string
// }

// const users: UserType[] = [
//   {
//     id: 1,
//     name: 'my Name',
//     age: 32,
//     avatar: '‚Äî‡∏Ö/·ê†.Ã´ .·êü\\‡∏Ö‚Äî',
//     address: 'my Address'
//   },
//   {
//     id: 2,
//     name: 'John',
//     age: 22,
//     avatar: ':)',
//     address: 'California'
//   },
//   {
//     id: 3,
//     name: 'Mike',
//     age: 18,
//     avatar: '^._.^',
//     address: 'New York'
//   },
//   {
//     id: 4,
//     name: 'Emma',
//     age: 38,
//     avatar: '/·ê†-Íûà-·êü\\',
//     address: 'Washington'
//   },
// ]

// const StartPage = () => {
//   const navigate = useNavigate()
//   const friends = users.filter(u => u.id !== 1)

//   const mappedFriends = friends.map((f, i) => {
//     const go = () => {
//       navigate('/friend/' + f.id)
//     }

//     return (
//       <div key={i} onClick={go} style={{paddingLeft: 24, color: 'blue', cursor: 'pointer'}}>
//         {f.name}, {f.age}
//       </div>
//     )
//   })

//   return (
//     <div>
//       <h2>üôÇ My profile</h2>
//       <Profile userId={1}/>
//       <hr/>
//       <h2>üë™ Friends</h2>
//       {mappedFriends}
//     </div>
//   )
// }
// const Profile: React.FC<{ userId?: number }> = ({userId}) => {
//   const {id} = useParams<{ id: string }>()
//   const user = users.find(u => u.id === +(id || userId || 0))

//   return (
//     <div>
//       <div>
//         <b>avatar</b> {user?.avatar}</div>
//       <div>
//         <div><b>name</b>: {user?.name}</div>
//         <div><b>age</b>: {user?.age}</div>
//         <div><b>address</b>: {user?.address}</div>
//       </div>
//     </div>
//   )
// }

// export const Friends = () => {
//   return (
//     <Routes>
//       <Route path={'/'} element={<StartPage/>}/>
//       <Route path={'/friend/:id'} element={<Profile/>}/>
//       <Route path={'*'} element={<div>‚ùå404 Page Not Found‚ùå</div>}/>
//     </Routes>
//   )
// }

// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(
//   <BrowserRouter>
//     <Friends/>
//   </BrowserRouter>
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
// –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π.
// –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ –≤–∏–¥–∏–º ‚ùå404 Page Not Found‚ùå
// –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ –∫–ª–∏–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥—Ä—É–≥–µ.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.
//
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Profile userId={4}/>

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ / –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º—ã –≤–∏–¥–∏–º Login, –∞ –ø–æ—Ç–æ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã Profile
// –ù–æ —ç—Ç–æ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—É–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –Ω–∞ Login,
// –ø–æ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ,
// –∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ –æ–Ω –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å Loader

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Loader/>
// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import React, { FC, useEffect } from "react";
// import axios from "axios";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";

// // Styles
// const table: React.CSSProperties = {
//   borderCollapse: "collapse",
//   width: "100%",
//   tableLayout: "fixed",
// };

// const th: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
//   background: "lightgray",
//   cursor: "pointer",
// };

// const td: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
// };

// const thActive: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
//   background: "lightblue",
//   cursor: "pointer",
// };

// // Types
// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// };

// type UsersResponseType = {
//   items: UserType[];
//   totalCount: number;
// };

// type ParamsType = {
//   sortBy: string | null;
//   sortDirection: "asc" | "desc" | null;
// };

// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });

// const api = {
//   getUsers(params?: ParamsType) {
//     return instance.get<UsersResponseType>("users", { params });
//   },
// };

// // Reducer
// const initState = {
//   users: [] as UserType[],
//   params: {
//     sortBy: "name",
//     sortDirection: "asc",
//   } as ParamsType,
// };
// type InitStateType = typeof initState;

// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "SET_USERS":
//       return { ...state, users: action.users };
//     case "SET_PARAMS":
//       return { ...state, params: { ...state.params, ...action.payload } };
//     default:
//       return state;
//   }
// };

// // Store
// const rootReducer = combineReducers({ app: appReducer });

// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// const setUsersAC = (users: UserType[]) => ({ type: "SET_USERS", users }) as const;
// const setParamsAC = (payload: ParamsType) => ({ type: "SET_PARAMS", payload }) as const;
// type ActionsType =
//   | ReturnType<typeof setUsersAC>
//   | ReturnType<typeof setParamsAC>

// // Thunk
// const getUsersTC = (): AppThunk => (dispatch, getState) => {
//   const params = getState().app.params;
//   api.getUsers(params).then((res) => dispatch(setUsersAC(res.data.items)));
// };

// export const Users = () => {
//   const users = useAppSelector((state) => state.app.users);
//   const sortBy = useAppSelector((state) => state.app.params.sortBy);
//   const sortDirection = useAppSelector((state) => state.app.params.sortDirection);

//   const dispatch = useAppDispatch();

//   useEffect(() => {
//     dispatch(getUsersTC());
//   }, [sortBy, sortDirection]);

//   const sortHandler = (sortBy: string) => {
//     const direction = sortDirection === "asc" ? "desc" : "asc";
//     dispatch(setParamsAC({ sortBy, sortDirection: direction }));
//   };

//   return (
//     <div>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//       <table style={table}>
//         <thead>
//           <tr>
//             <Th name={"name"} sortHandler={sortHandler} />
//             <Th name={"age"} sortHandler={sortHandler} />
//           </tr>
//         </thead>
//         <tbody>
//           {users.map((u) => {
//             return (
//               <tr key={u.id}>
//                 <td style={td}>{u.name}</td>
//                 <td style={td}>{u.age}</td>
//               </tr>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// type ThPropsType = {
//   name: string;
//   sortHandler: (name: string) => void;
// };

// const Th: FC<ThPropsType> = ({ name, sortHandler }) => {
//   const sortBy = useAppSelector((state) => state.app.params.sortBy);
//   const sortDirection = useAppSelector((state) => state.app.params.sortDirection);

//   const condition1 = name === sortBy //–û–¢–í–ï–¢ !!!!!!
//   const condition2 = sortDirection === 'asc' //–û–¢–í–ï–¢ !!!!!

//   return (
//     <th style={condition1 ? thActive : th} onClick={() => sortHandler(name)}>
//       {name}
//       {condition1 && (condition2 ? <span> ‚¨Ü</span> : <span> ‚¨á</span>)}
//     </th>
//   );
// };

// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Users />
//   </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
// –ü–æ–∫–ª–∏–∫–∞–π—Ç–µ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º age –∏ name –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ—Ä–Ω–æ,
// –Ω–æ –≤ —à–∞–ø–∫–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å—Ç—Ä–µ–ª–∫–∏ –∏ –Ω–µ –≤–∏–¥–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤–º–µ—Å—Ç–æ XXX –∏ YYY, —á—Ç–æ–±—ã:
// 1) –°—Ç—Ä–µ–ª–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ (–µ—Å–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É, —Ç–æ —Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö)
// 2) –®–∞–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ –±—ã–ª–∞ –≥–æ–ª—É–±–∞—è, –∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Ä–∞—è
// ‚ùó –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª

// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: a === '1' b !== a




// import axios from 'axios'
// import React, { useEffect, useState } from 'react'
// import ReactDOM from 'react-dom/client'

// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// }

// // API
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.io/api/'})

// const api = {
//   getUsers() {
//     // return instance.get('users?pageSize=3&pageNumber=2')
//     return instance.get('users', {params: {pageSize: 3, pageNumber: 2 }})

//   },
// }

// // App
// export const App = () => {

//   const [users, setUsers] = useState<UserType[]>([])

//   useEffect(() => {
//     api.getUsers()
//       .then((res) => {
//         setUsers(res.data.items)
//       })
//   }, [])


//   return (
//     <>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//       {
//         users.map(u => {
//           return <div style={{display: 'flex', gap: '10px'}} key={u.id}>
//             <p><b>name</b>: {u.name}</p>
//             <p><b>age</b>: {u.age}</p>
//           </div>
//         })
//       }
//     </>
//   )
// }


// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ –∏–∑ 3-—á–µ–ª–æ–≤–µ–∫.
// –ü–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ, –∞ –∏–∑-–∑–∞ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤—Å–µ —Ç–µ—Ö –∂–µ —é–∑–µ—Ä–æ–≤),
// –ø—Ä–∏ —ç—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –≤–æ–ø—Ä–æ—Å–∞ –∏ –∞–º–ø–µ—Ä—Å–∞–Ω–¥–∞.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É (–ø–µ—Ä–µ–Ω–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã)


// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return instance.get('users=pageSize=3=pageNumber=2')

// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import React, { useEffect } from "react";
// import axios from "axios";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";

// // Styles
// const table: React.CSSProperties = {
//   borderCollapse: "collapse",
//   width: "100%",
//   tableLayout: "fixed",
// };

// const th: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
//   background: "lightgray",
//   cursor: "pointer",
// };

// const td: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
// };

// // Types
// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// };

// type UsersResponseType = {
//   items: UserType[];
//   totalCount: number;
// };

// type ParamsType = {
//   sortBy: string | null;
//   sortDirection: "asc" | "desc" | null;
// };

// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });

// const api = {
//   getUsers(params?: ParamsType) {
//     return instance.get<UsersResponseType>("users", { params });
//   },
// };

// // Reducer
// const initState = {
//   users: [] as UserType[],
//   params: {
//     sortBy: null,
//     sortDirection: "asc",
//   } as ParamsType,
// };
// type InitStateType = typeof initState;

// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "SET_USERS":
//       return { ...state, users: action.users };
//     case "SET_PARAMS":
//       return { ...state, params: { ...state.params, ...action.payload } };
//     default:
//       return state;
//   }
// };

// // Store
// const rootReducer = combineReducers({ app: appReducer });

// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// const setUsersAC = (users: UserType[]) => ({ type: "SET_USERS", users }) as const;
// const setParamsAC = (payload: ParamsType) => ({ type: "SET_PARAMS", payload }) as const;
// type ActionsType = ReturnType<typeof setUsersAC> | ReturnType<typeof setParamsAC>;

// // Thunk
// const getUsersTC = (): AppThunk => (dispatch, getState) => {
//   const params = getState().app.params;
//   api
//     .getUsers(params.sortBy ? params : undefined)
//     .then((res) => dispatch(setUsersAC(res.data.items)));
// };

// export const Users = () => {
//   const users = useAppSelector((state) => state.app.users);
//   const sortBy = useAppSelector((state) => state.app.params.sortBy);
//   const sortDirection = useAppSelector((state) => state.app.params.sortDirection);
//   console.log(users, sortBy, sortDirection);

//   const dispatch = useAppDispatch();
//   useEffect(()=> {
//       dispatch(getUsersTC())
//     },[sortBy, sortDirection])

//   // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó

//   const sortHandler = (name: string) => {
//     const direction = sortDirection === "asc" ? "desc" : "asc";
//     dispatch(setParamsAC({ sortBy: name, sortDirection: direction }));
//   };

//   return (
//     <div>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//       <table style={table}>
//         <thead>
//           <tr>
//             <th style={th} onClick={() => sortHandler("name")}>
//               Name
//             </th>
//             <th style={th} onClick={() => sortHandler("age")}>
//               Age
//             </th>
//           </tr>
//         </thead>
//         <tbody>
//           {users.map((u) => {
//             return (
//               <tr key={u.id}>
//                 <td style={td}>{u.name}</td>
//                 <td style={td}>{u.age}</td>
//               </tr>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Users />
//   </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –ù–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã:
// 1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å
// 2) –ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–æ–∑—Ä–∞—Å—Ç—É
// 3) –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ –ø–æ–ª–µ 2 —Ä–∞–∑–∞)

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: console.log(users, sortBy, sortDirection)





// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import React, { useEffect } from "react";
// import axios from "axios";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";

// // Styles
// const table: React.CSSProperties = {
//   borderCollapse: "collapse",
//   width: "100%",
//   tableLayout: "fixed",
// };

// const th: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
//   background: "lightgray",
//   cursor: "pointer",
// };

// const td: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
// };

// // Types
// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// };

// type UsersResponseType = {
//   items: UserType[];
//   totalCount: number;
// };

// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });

// const api = {
//   getUsers() {
//     return instance.get<UsersResponseType>("users");
//   },
// };

// // Reducer
// const initState = {
//   users: [] as UserType[],
// };
// type InitStateType = typeof initState;

// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "SET-USERS":
//       return { ...state, users: action.users };
//     default:
//       return state;
//   }
// };

// // Store
// const rootReducer = combineReducers({ app: appReducer });

// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// const setUsersAC = (users: UserType[]) => ({ type: "SET-USERS", users });
// type ActionsType = ReturnType<typeof setUsersAC>;

// // Thunk
// const getUsersTC = (): AppThunk => (dispatch, getState) => {
//   api.getUsers().then((res) => dispatch(setUsersAC(res.data.items)));
// };

// // Components
// export const Users = () => {
//   const users = useAppSelector((state) => state.app.users);

//   const dispatch = useAppDispatch();

//   useEffect(() => {
//     dispatch(getUsersTC());
//   }, []);

//   return (
//     <div>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//       <table style={table}>
//         <thead>
//           <tr>
//             <th style={th}> Name</th>
//             <th style={th}> Age</th>
//           </tr>
//         </thead>
//         <tbody>
//           {users.map((u) => (
//             <tr key={u.id}>
//               <td style={td}>{u.name}</td>
//               <td style={td}>{u.age}</td>
//             </tr>
//           ))}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Users />
//   </Provider>,
// );

// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å, —Ç.–∫. –≤ –∫–æ–¥–µ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞
// // –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–π—Ç–∏ –±–∞–≥—É, —á—Ç–æ–±—ã —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∞—Å—å.
// // –í –∫–∞—á–µ—Å—Ç–≤–µ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞
// // ‚ùó –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏, –≤ –æ—Ç–≤–µ—Ç–∞—Ö —É—á—Ç–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã

// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {users.map(u)=> —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç—Ä–∏—Å—É–π—Å—è –í–ñ–£–• –í–ñ–£–•}



// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import React, { useEffect } from "react";
// import axios from "axios";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";

// // Styles
// const table: React.CSSProperties = {
//   borderCollapse: "collapse",
//   width: "100%",
//   tableLayout: "fixed",
// };

// const th: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
//   background: "lightgray",
//   cursor: "pointer",
// };

// const td: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
// };

// // Types
// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// };

// type UsersResponseType = {
//   items: UserType[];
//   totalCount: number;
// };

// type ParamsType = {
//   sortBy: string | null;
//   sortDirection: "asc" | "desc" | null;
// };

// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });

// const api = {
//   getUsers(params?: ParamsType) {
//     return instance.get<UsersResponseType>("users", { params });
//   },
// };

// // Reducer
// const initState = {
//   users: [] as UserType[],
//   params: {
//     sortBy: null,
//     sortDirection: "asc",
//   } as ParamsType,
// };
// type InitStateType = typeof initState;

// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "SET_USERS":
//       return { ...state, users: action.users };
//     case "SET_PARAMS":
//       return { ...state, params: { ...state.params, ...action.payload } };
//     default:
//       return state;
//   }
// };

// // Store
// const rootReducer = combineReducers({ app: appReducer });

// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// const setUsersAC = (users: UserType[]) => ({ type: "SET_USERS", users }) as const;
// const setParamsAC = (payload: ParamsType) => ({ type: "SET_PARAMS", payload }) as const;
// type ActionsType = ReturnType<typeof setUsersAC> | ReturnType<typeof setParamsAC>;

// // Thunk
// const getUsersTC = (): AppThunk => (dispatch, getState) => {
//   const params = getState().app.params;
//   api
//     .getUsers(params.sortBy ? params : undefined)
//     .then((res) => dispatch(setUsersAC(res.data.items)));
// };

// export const Users = () => {
//   const users = useAppSelector((state) => state.app.users);
//   const sortBy = useAppSelector((state) => state.app.params.sortBy);
//   const sortDirection = useAppSelector((state) => state.app.params.sortDirection);
//   console.log(users, sortBy, sortDirection);

//   const dispatch = useAppDispatch();

//   useEffect(()=> {
//   dispatch(getUsersTC())
// },[sortBy, sortDirection]) // –û–¢–í–ï–¢
//   // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó

//   const sortHandler = (name: string) => {
//     const direction = sortDirection === "asc" ? "desc" : "asc";
//     dispatch(setParamsAC({ sortBy: name, sortDirection: direction }));
//   };

//   return (
//     <div>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//       <table style={table}>
//         <thead>
//           <tr>
//             <th style={th} onClick={() => sortHandler("name")}>
//               Name
//             </th>
//             <th style={th} onClick={() => sortHandler("age")}>
//               Age
//             </th>
//           </tr>
//         </thead>
//         <tbody>
//           {users.map((u) => {
//             return (
//               <tr key={u.id}>
//                 <td style={td}>{u.name}</td>
//                 <td style={td}>{u.age}</td>
//               </tr>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Users />
//   </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –ù–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã:
// 1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å
// 2) –ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–æ–∑—Ä–∞—Å—Ç—É
// 3) –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ –ø–æ–ª–µ 2 —Ä–∞–∑–∞)

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: console.log(users, sortBy, sortDirection)







// import ReactDOM from 'react-dom/client';
// import React from 'react';

// export const Jpegs = () => {

//   return (
//     <div style={{height: '100%',
//         margin: 0,
//         padding: 0}}>
//       <iframe
//         src="//coub.com/embed/2wp0wa?muted=false&autostart=false&originalSize=false&startWithHD=true"
//         frameBorder="0"
//         width="640"
//         height="360"
//         allow="autoplay"
//         allowFullScreen={true}
    
//       />
//     </div>
//   )
// }

// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Jpegs/>);

// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∂–∞–ª—É—é—Ç—Å—è, —á—Ç–æ –Ω–µ–ª—å–∑—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤–∏–¥–µ–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞
// //
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: iframe.—Å—Ç–∞–Ω—å–ù–∞–í–µ—Å—å–≠–∫—Ä–∞–Ω–ü–æ–∂–∞–ª—É–π—Å—Ç–∞()




// import ReactDOM from 'react-dom/client';
// import React, { useState } from 'react'

// export const Jpegs = () => {
//   const [fileURL, setFileURL] = useState<any>()

//   const onChange = (e: any) => {
//     const maybeFile = e.target.files?.[0]
//     if (maybeFile) {
//       if (maybeFile.type === 'image/jpeg') {
       
//         setFileURL(URL.createObjectURL(maybeFile)) // –û–¢–í–ï–¢ !!!!!!!
//         return
//       } else alert('not .jpg!')
//     }
//     setFileURL('')
//   }

//   return (
//     <div>
//       <input
//         type={'file'}
//         onChange={onChange}

//       />
//       {fileURL && (
//         <img
//           src={fileURL}
//           alt={'avatar'}

//         />
//       )}
//     </div>
//   )
// }

// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Jpegs/>);

// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ.
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞
// //
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: value={fileURL}




// // // import ReactDOM from "react-dom/client";
// // // import React, { FC, ReactNode } from "react";

// // // const quizStyle: React.CSSProperties = {
// // //   background: "lightgreen",
// // //   padding: "10px",
// // //   margin: "10px",
// // // };

// // // type BtnPropsType = {
// // //   question: ReactNode;
// // //   children: ReactNode;
// // // };

// // // const Block: FC<BtnPropsType> = ({ question, children }) => {
// // //   return (
// // //     <div style={{ display: "flex", alignItems: "center" }}>
// // //       {question} = {children}
// // //     </div>
// // //   );
// // // };

// // // const quiz = [
// // //   { id: 1, question: "1 + 1", answer: "2" },
// // //   { id: 2, question: "2 + 2", answer: "4" },
// // //   { id: 3, question: "3 + 3", answer: "6" },
// // // ];

// // // const App = () => {
// // //   return (
// // //     <div>
// // //       {quiz.map((q) => {
// // //         return(
// // //           <Block key={ q.id } question={<h2 style={ quizStyle }>{ q.question }</h2>}>
// // //             <h2 style={ quizStyle }>{ q.answer }</h2>
// // //           </Block>
// // //         )
// // //       }) }
// // //     </div>
// // //   );
// // // };

// // // const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// // // root.render(<App />);

// // // // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // // // –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX –∏ YYY, —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ quiz.
// // // // 1 + 1 = 2
// // // // 2 + 2 = 4
// // // // 3 + 3 = 6
// // // // ‚ùó –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª

// // // // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: quiz[0]=yes redux=h2




// // // // // import React, { useState } from "react";
// // // // // import ReactDOM from "react-dom/client";
// // // // // import { ThunkAction, ThunkDispatch } from "redux-thunk";
// // // // // import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// // // // // import { configureStore, combineReducers } from "@reduxjs/toolkit";

// // // // // // Styles
// // // // // const modal: React.CSSProperties = {
// // // // //   position: "fixed",
// // // // //   zIndex: 1,
// // // // //   left: 0,
// // // // //   top: 0,
// // // // //   width: "100%",
// // // // //   height: "100%",
// // // // //   overflow: "auto",
// // // // //   backgroundColor: "rgba(23,26,38,0.26)",
// // // // // };

// // // // // const modalContent: React.CSSProperties = {
// // // // //   backgroundColor: "#fefefe",
// // // // //   margin: "15% auto",
// // // // //   padding: "20px",
// // // // //   border: "1px solid #888",
// // // // //   width: "80%",
// // // // // };

// // // // // // Reducer
// // // // // const initState = { tasks: [] as any[] };
// // // // // type InitStateType = typeof initState;

// // // // // const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
// // // // //   switch (action.type) {
// // // // //     case "ADD_TASK":
// // // // //       return {
// // // // //         ...state,
// // // // //         tasks: [action.task, ...state.tasks],
// // // // //       };
// // // // //     case "CHANGE_TASK":
// // // // //       return {
// // // // //         ...state,
// // // // //         tasks: [action.task, ...state.tasks.filter((t: any) => t.id !== action.task.id)],
// // // // //       };
// // // // //     default:
// // // // //       return state;
// // // // //   }
// // // // // };

// // // // // // Store
// // // // // const rootReducer = combineReducers({ app: appReducer });

// // // // // const store = configureStore({ reducer: rootReducer });
// // // // // type RootState = ReturnType<typeof store.getState>;
// // // // // type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// // // // // type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// // // // // const useAppDispatch = () => useDispatch<AppDispatch>();
// // // // // const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// // // // // const addTask = (task: any) => ({ type: "ADD_TASK", task }) as const;
// // // // // const changeTask = (task: any) => ({ type: "CHANGE_TASK", task }) as const;
// // // // // type ActionsType = ReturnType<typeof addTask> | ReturnType<typeof changeTask>;

// // // // // // Components
// // // // // const Modal = (props: any) => {
// // // // //   const [value, setValue] = useState(props.task?.name || "");

// // // // //   return (
// // // // //     <div style={modalContent}>
// // // // //       modal:
// // // // //       <input value={value} onChange={(e) => setValue(e.target.value)} />
// // // // //       <button onClick={() => props.callback(value)}>{props.title}</button>
// // // // //     </div>
// // // // //   );
// // // // // };

// // // // // const Task = (props: any) => {
// // // // //   const [show, setShow] = useState(false);

// // // // //   return (
// // // // //     <div>
// // // // //       {props.task.name}
// // // // //       <button onClick={() => setShow(true)}>change</button>
// // // // //       {show && (
// // // // //         <Modal
// // // // //           callback={(value: string) => {
// // // // //             props.change(value);
// // // // //             setShow(false);
// // // // //           }}
// // // // //           title={"change"}
// // // // //           task={props.task} // –û–¢–í–ï–¢ !!!!!
// // // // //         />
// // // // //       )}
// // // // //     </div>
// // // // //   );
// // // // // };

// // // // // export const Todolist = () => {
// // // // //   const tasks = useAppSelector((state) => state.app.tasks);
// // // // //   const dispatch = useAppDispatch();
// // // // //   const [show, setShow] = useState(false);

// // // // //   const getId = () => tasks.reduce((acc: number, t: any) => (acc > t.id ? acc : t.id), 0) + 1;

// // // // //   const mapped = tasks.map((t: any) => (
// // // // //     <Task
// // // // //       key={t.id}
// // // // //       task={t}
// // // // //       change={(value: string) => dispatch(changeTask({ id: t.id, name: value }))}
// // // // //     />
// // // // //   ));

// // // // //   return (
// // // // //     <div style={modal}>
// // // // //       <button onClick={() => setShow(true)}>open modal</button>
// // // // //       {show && (
// // // // //         <Modal
// // // // //           callback={(value: string) => {
// // // // //             dispatch(addTask({ id: getId(), name: value }));
// // // // //             setShow(false);
// // // // //           }}
// // // // //           title={"add"}
// // // // //         />
// // // // //       )}
// // // // //       {mapped}
// // // // //     </div>
// // // // //   );
// // // // // };

// // // // // const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// // // // // root.render(
// // // // //   <Provider store={store}>
// // // // //     <Todolist />
// // // // //   </Provider>,
// // // // // );

// // // // // üìú–û–ø–∏—Å–∞–Ω–∏–µ:
// // // // // –û—Ç–∫—Ä–æ–π—Ç–µ –º–æ–¥–∞–ª–∫—É –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Ç–µ–∫—Å—Ç.
// // // // // –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç.
// // // // // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞—Å–∫–∏ –≤ –∏–Ω–ø—É—Ç–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ.
// // // // // –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–æ—á–∏–Ω–∏—Ç—å —ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
// // // // //
// // // // // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å,
// // // // // —á—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
// // // // //
// // // // // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: defaultValue={value}






// // // // // // import ReactDOM from "react-dom/client";
// // // // // // import { ThunkAction, ThunkDispatch } from "redux-thunk";
// // // // // // import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// // // // // // import React, { useState } from "react";
// // // // // // import { configureStore, combineReducers } from "@reduxjs/toolkit";

// // // // // // // Styles
// // // // // // const modal: React.CSSProperties = {
// // // // // //   position: "fixed",
// // // // // //   zIndex: 1,
// // // // // //   left: 0,
// // // // // //   top: 0,
// // // // // //   width: "100%",
// // // // // //   height: "100%",
// // // // // //   overflow: "auto",
// // // // // //   backgroundColor: "rgba(23,26,38,0.26)",
// // // // // // };

// // // // // // const modalContent: React.CSSProperties = {
// // // // // //   backgroundColor: "#fefefe",
// // // // // //   margin: "15% auto",
// // // // // //   padding: "20px",
// // // // // //   border: "1px solid #888",
// // // // // //   width: "80%",
// // // // // // };

// // // // // // // Reducer
// // // // // // const initState = { goodThings: [] as any[] };
// // // // // // type InitStateType = typeof initState;

// // // // // // const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
// // // // // //   switch (action.type) {
// // // // // //     case "LIKE":
// // // // // //       return {
// // // // // //         ...state,
// // // // // //         goodThings: [action.thing, ...state.goodThings],
// // // // // //       };
// // // // // //   }
// // // // // //   return state;
// // // // // // };

// // // // // // // Store
// // // // // // const rootReducer = combineReducers({ app: appReducer });

// // // // // // const store = configureStore({ reducer: rootReducer });
// // // // // // type RootState = ReturnType<typeof store.getState>;
// // // // // // type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// // // // // // type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// // // // // // const useAppDispatch = () => useDispatch<AppDispatch>();
// // // // // // const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// // // // // // const addThing = (thing: any) => ({ type: "LIKE", thing }) as const;
// // // // // // type ActionsType = ReturnType<typeof addThing>;

// // // // // // const Modal = (props: any) => {
// // // // // //   return (
// // // // // //     <div style={modalContent}>
// // // // // //       modal:
// // // // // //       <input value={props.value} onChange={(e) => props.setValue(e.target.value)} />
// // // // // //       <button onClick={props.add}>add</button>
// // // // // //     </div>
// // // // // //   );
// // // // // // };

// // // // // // // Components
// // // // // // export const Animals = () => {
// // // // // //   const goodThings = useAppSelector((state) => state.app.goodThings);
// // // // // //   const dispatch = useAppDispatch();

// // // // // //   const [value, setValue] = useState("");
// // // // // //   const [show, setShow] = useState(false);

// // // // // //   const mapped = goodThings.map((t: any, i: number) => <div key={i}>{t}</div>);

// // // // // //   return (
// // // // // //     <div style={modal}>
// // // // // //       <button onClick={() => setShow(true)}>show modal</button>

// // // // // //       {show && (
// // // // // //         <Modal
// // // // // //           value={value}
// // // // // //           setValue={setValue}
// // // // // //           add={() => {
// // // // // //             dispatch(addThing(value));
// // // // // //             setValue("");
// // // // // //             setShow(false)
// // // // // //           }}
// // // // // //         />
// // // // // //       )}

// // // // // //       {mapped}
// // // // // //     </div>
// // // // // //   );
// // // // // // };

// // // // // // const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// // // // // // root.render(
// // // // // //   <Provider store={store}>
// // // // // //     <Animals />
// // // // // //   </Provider>,
// // // // // // );

// // // // // // // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // // // // // // –û—Ç–∫—Ä–æ–π—Ç–µ –º–æ–¥–∞–ª–∫—É, –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ add.
// // // // // // // –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è —Å–Ω–∏–∑—É, –Ω–æ –º–æ–¥–∞–ª–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ –ø—Ä–µ–∂–Ω–µ–º—É –≤–∏–¥–∏–º–æ–π.

// // // // // // // ü™õ –ó–∞–¥–∞—á–∞:
// // // // // // // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –º–æ–¥–∞–ª–∫–∞ –ø—Ä—è—Ç–∞–ª–∞—Å—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
// // // // // // // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏

// // // // // // // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: closeModal(true)












// // // // // // // // import React from "react";
// // // // // // // // import ReactDOM from "react-dom/client";
// // // // // // // // import { ThunkAction, ThunkDispatch } from "redux-thunk";
// // // // // // // // import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// // // // // // // // import { configureStore, combineReducers } from "@reduxjs/toolkit";

// // // // // // // // // Reducer
// // // // // // // // const initState = {
// // // // // // // //   work: 0,
// // // // // // // //   donate: 0,
// // // // // // // //   balance: 0,
// // // // // // // // };
// // // // // // // // type InitStateType = typeof initState;

// // // // // // // // const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
// // // // // // // //   switch (action.type) {
// // // // // // // //     case "CHANGE_VALUE":
// // // // // // // //       return {
// // // // // // // //         ...state,
// // // // // // // //         ...action.payload,
// // // // // // // //       };
// // // // // // // //     default:
// // // // // // // //       return state;
// // // // // // // //   }
// // // // // // // // };

// // // // // // // // // Store
// // // // // // // // const rootReducer = combineReducers({ app: appReducer });

// // // // // // // // const store = configureStore({ reducer: rootReducer });
// // // // // // // // type RootState = ReturnType<typeof store.getState>;
// // // // // // // // type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// // // // // // // // type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// // // // // // // // const useAppDispatch = () => useDispatch<AppDispatch>();
// // // // // // // // const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// // // // // // // // const changeValue = (payload: any) => ({ type: "CHANGE_VALUE", payload }) as const;
// // // // // // // // type ActionsType = ReturnType<typeof changeValue>;

// // // // // // // // // Components
// // // // // // // // export const Income = () => {
// // // // // // // //   const work = useAppSelector((state) => state.app.work);
// // // // // // // //   const donate = useAppSelector((state) => state.app.donate);
// // // // // // // //   const balance = useAppSelector((state) => state.app.balance);

// // // // // // // //   const dispatch = useAppDispatch();

// // // // // // // //   return (
// // // // // // // //     <div>
// // // // // // // //       <div>
// // // // // // // //         work:{" "}
// // // // // // // //         <input
// // // // // // // //           value={work}
// // // // // // // //           type={"number"}
// // // // // // // //           onChange={(e) => dispatch(changeValue({ work: +e.target.value }))}
// // // // // // // //         />
// // // // // // // //       </div>
// // // // // // // //       <div>
// // // // // // // //         donate:{" "}
// // // // // // // //         <input
// // // // // // // //           value={donate}
// // // // // // // //           type={"number"}
// // // // // // // //           onChange={(e) => dispatch(changeValue({ donate: +e.target.value }))}
// // // // // // // //         />
// // // // // // // //       </div>

// // // // // // // //       <h1>üíµ balance: {balance}</h1>
// // // // // // // //       <button
// // // // // // // //         onClick={() => {
// // // // // // // //           // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó
// // // // // // // //           dispatch(changeValue({balance: work +donate  }))
// // // // // // // //         }}
// // // // // // // //       >
// // // // // // // //         calculate balance
// // // // // // // //       </button>
// // // // // // // //     </div>
// // // // // // // //   );
// // // // // // // // };

// // // // // // // // const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// // // // // // // // root.render(
// // // // // // // //   <Provider store={store}>
// // // // // // // //     <Income />
// // // // // // // //   </Provider>,
// // // // // // // // );

// // // // // // // // // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // // // // // // // // –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –≤—ã–≤–µ–ª–∞—Å—å —Å—É–º–º–∞ –¥–æ—Ö–æ–¥–∞ –≤ —Å—Ç—Ä–æ–∫–µ –±–∞–ª–∞–Ω—Å–∞
// // // // // // // // //
// // // // // // // // // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: console.log(work + donate)
// // // // // // // // // import React from "react";
// // // // // // // // // import ReactDOM from "react-dom/client";
// // // // // // // // // import { ThunkAction, ThunkDispatch } from "redux-thunk";
// // // // // // // // // import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// // // // // // // // // import { configureStore, combineReducers } from "@reduxjs/toolkit";

// // // // // // // // // // Reducer
// // // // // // // // // const initState = {
// // // // // // // // //   animals: [
// // // // // // // // //     { likes: 0, name: "cat" },
// // // // // // // // //     { likes: 0, name: "dog" },
// // // // // // // // //     { likes: 0, name: "fish" },
// // // // // // // // //     { likes: 0, name: "spider" },
// // // // // // // // //     { likes: 0, name: "bird" },
// // // // // // // // //   ] as { likes: number; name: string }[],
// // // // // // // // // };
// // // // // // // // // type InitStateType = typeof initState;

// // // // // // // // // const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
// // // // // // // // //   switch (action.type) {
// // // // // // // // //     case "LIKE":
// // // // // // // // //       return {
// // // // // // // // //         ...state,
// // // // // // // // //         animals: state.animals.map((animal) => {
// // // // // // // // //           return animal.name === action.name ? {...animal, likes: action.likes} : animal
// // // // // // // // //           // return true ? { ...animal } : animal;
// // // // // // // // //         }),
// // // // // // // // //       };
// // // // // // // // //   }
// // // // // // // // //   return state;
// // // // // // // // // };

// // // // // // // // // // Store
// // // // // // // // // const rootReducer = combineReducers({ app: appReducer });

// // // // // // // // // const store = configureStore({ reducer: rootReducer });
// // // // // // // // // type RootState = ReturnType<typeof store.getState>;
// // // // // // // // // type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// // // // // // // // // type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// // // // // // // // // const useAppDispatch = () => useDispatch<AppDispatch>();
// // // // // // // // // const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// // // // // // // // // const like = (likes: any, name: any) => ({ type: "LIKE", likes, name }) as const;
// // // // // // // // // type ActionsType = ReturnType<typeof like>;

// // // // // // // // // // Components
// // // // // // // // // export const Animals = () => {
// // // // // // // // //   const animals = useAppSelector((state) => state.app.animals);
// // // // // // // // //   const dispatch = useAppDispatch();

// // // // // // // // //   const mapped = animals.map((a: any, i: number) => (
// // // // // // // // //     <div key={i}>
// // // // // // // // //       {a.name}-{a.likes}-<button onClick={() => dispatch(like(a.likes + 1, a.name))}>Like!</button>
// // // // // // // // //     </div>
// // // // // // // // //   ));

// // // // // // // // //   return <div>{mapped}</div>;
// // // // // // // // // };

// // // // // // // // // const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// // // // // // // // // root.render(
// // // // // // // // //   <Provider store={store}>
// // // // // // // // //     <Animals />
// // // // // // // // //   </Provider>,
// // // // // // // // // );

// // // // // // // // // // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // // // // // // // // // –ù–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö.
// // // // // // // // // // –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ like –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.
// // // // // // // // // // –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–æ—á–∏–Ω–∏—Ç—å –ª–∞–π–∫–∏.
// // // // // // // // // // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏
// // // // // // // // // //
// // // // // // // // // // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: -{a.likes + 1}-



// —ç–∫–∑–∞–º–µ–Ω—ã 5—ã–π —Å–ø—Ä–∏–Ω—Ç 2–æ–π —ç–∫–∑–∞–º–µ–Ω - –∑–∞–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä 6 : 

// import axios from 'axios'
// import React, { useEffect, useState } from 'react'
// import ReactDOM from 'react-dom/client'

// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// }

// // API
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.io/api/'})

// const api = {
//   getUsers() {
//     // return instance.get('users?pageSize=3&pageNumber=2')
//     return instance.get('/users', {params: {pageSize: 3, pageNumber: 2}}) // –û–¢–í–ï–¢!
//   },
// }

// // App
// export const App = () => {

//   const [users, setUsers] = useState<UserType[]>([])

//   useEffect(() => {
//     api.getUsers()
//       .then((res) => {
//         setUsers(res.data.items)
//       })
//   }, [])


//   return (
//     <>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//       {
//         users.map(u => {
//           return <div style={{display: 'flex', gap: '10px'}} key={u.id}>
//             <p><b>name</b>: {u.name}</p>
//             <p><b>age</b>: {u.age}</p>
//           </div>
//         })
//       }
//     </>
//   )
// }


// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ –∏–∑ 3-—á–µ–ª–æ–≤–µ–∫.
// –ü–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ, –∞ –∏–∑-–∑–∞ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤—Å–µ —Ç–µ—Ö –∂–µ —é–∑–µ—Ä–æ–≤),
// –ø—Ä–∏ —ç—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –≤–æ–ø—Ä–æ—Å–∞ –∏ –∞–º–ø–µ—Ä—Å–∞–Ω–¥–∞.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É (–ø–µ—Ä–µ–Ω–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã)



// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";

// // Styles
// const table: React.CSSProperties = {
//   borderCollapse: "collapse",
//   width: "100%",
//   tableLayout: "fixed",
// };

// const th: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
//   background: "lightgray",
//   cursor: "pointer",
// };

// const td: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
// };

// // Types
// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// };

// type UsersResponseType = {
//   items: UserType[];
//   totalCount: number;
// };

// type ParamsType = {
//   sortBy: string | null;
//   sortDirection: "asc" | "desc" | null;
// };

// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });

// const api = {
//   getUsers(params?: ParamsType) {
//     return instance.get<UsersResponseType>("users", { params });
//   },
// };

// // Reducer
// const initState = { users: [] as UserType[] };
// type InitStateType = typeof initState;

// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "SET_USERS":
//       return { ...state, users: action.users };
//     default:
//       return state;
//   }
// };

// // Store
// const rootReducer = combineReducers({ app: appReducer });

// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// const setUsersAC = (users: UserType[]) => ({ type: "SET_USERS", users }) as const;
// type ActionsType = ReturnType<typeof setUsersAC>;

// // Thunk
// const getUsersTC =
//   (searchParams?: ParamsType): AppThunk =>
//   (dispatch) => {
//     api.getUsers(searchParams).then((res) => dispatch(setUsersAC(res.data.items)));
//   };

// export const Users = () => {
//   const [activeColumn, setActiveColumn] = useState<ParamsType>({
//     sortBy: null,
//     sortDirection: 'asc',
//   });

//   const users = useAppSelector((state) => state.app.users);

//   const dispatch = useAppDispatch();

//   useEffect(() => {
//     dispatch(activeColumn.sortBy ? getUsersTC(activeColumn) : getUsersTC());
//   }, [activeColumn]);

//   const sortHandler = (sortBy: string) => {
//     // setActiveColumn({})
//     setActiveColumn(prevState => prevState.sortDirection === null ? {sortBy, sortDirection: 'asc'} : prevState.sortDirection === 'asc' ? {sortBy,sortDirection: 'desc' } : {sortBy, sortDirection: 'asc'}) //–û–¢–í–ï–¢!!!! –ù–û –ù–ê–ß–ò–ù–ê–ï–¢ –°–û–†–¢–ò–†–û–í–ê–¢–¨–°–Ø –ü–û –£–ë–´–í–ê–ù–ò–Æ!
//     // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó
//   };

//   return (
//     <div>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//       <table style={table}>
//         <thead>
//           <tr>
//             <th style={th} onClick={() => sortHandler("name")}>
//               Name
//               {activeColumn?.sortBy === "name" &&
//                 (activeColumn.sortDirection === "asc" ? (
//                   <span> &#8593;</span>
//                 ) : (
//                   <span> &#8595;</span>
//                 ))}
//             </th>
//             <th style={th} onClick={() => sortHandler("age")}>
//               Age
//               {activeColumn?.sortBy === "age" &&
//                 (activeColumn.sortDirection === "asc" ? (
//                   <span> &#8593;</span>
//                 ) : (
//                   <span> &#8595;</span>
//                 ))}
//             </th>
//           </tr>
//         </thead>
//         <tbody>
//           {users.map((u) => {
//             return (
//               <tr key={u.id}>
//                 <td style={td}>{u.name}</td>
//                 <td style={td}>{u.age}</td>
//               </tr>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Users />
//   </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤–º–µ—Å—Ç–æ XXX –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–æ–∑—Ä–∞—Å—Ç—É.
// –¢.–µ. –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ name –ª–∏–±–æ age –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ.
// –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç–æ—Ç –∂–µ —Å—Ç–æ–ª–±–µ—Ü —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
// –ü—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –Ω–∞–∂–∞—Ç–∏—è—Ö —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è, –∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è.
// ‚ùó —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —Ç.–µ. sort –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: sort(a, b)






// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";

// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// };

// type UsersResponseType = {
//   items: UserType[];
//   totalCount: number;
// };

// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });

// const api = {
//   getUsers(search: string) {
//     return instance.get<UsersResponseType>(`users?name=${search}&pageSize=100`);
//   },
// };

// const initState = { users: [] as UserType[] };
// type InitStateType = typeof initState;

// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "SET_USERS":
//       return { ...state, users: action.users };
//     default:
//       return state;
//   }
// };

// // Store
// const rootReducer = combineReducers({ app: appReducer });

// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// const setUsersAC = (users: UserType[]) => ({ type: "SET_USERS", users }) as const;
// type ActionsType = ReturnType<typeof setUsersAC>;

// // Thunk
// const getFriends =
//   (name: string): AppThunk =>
//   (dispatch) => {
//     api.getUsers(name).then((res) => dispatch(setUsersAC(res.data.items)));
//   };

// export const Users = () => {
//   const users = useAppSelector((state) => state.app.users);
//   const dispatch = useAppDispatch();
//   const [name, setName] = useState("");
//   const [timerId, setTimerId] = useState(0);

//   useEffect(() => {
//       clearTimeout(timerId) //–≠–¢–û –û–¢–í–ï–¢!!!!!!

//     setTimerId (+
//       setTimeout(() => {
//       dispatch(getFriends(name));
//       }, 1500)
//     )
//     // return ()=> {
//     //   clearTimeout(timerId)
//     // }
//   }, [name]);

//   return (
//     <div>
//       <input value={name} onChange={(e) => setName(e.target.value)} />
//       {users.map((u) => {
//         return (
//           <div key={u.id}>
//             <p>
//               <b>name</b>: {u.name}
//             </p>
//           </div>
//         );
//       })}
//     </div>
//   );
// };

// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Users />
//   </Provider>,
// );

// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ù–∞ —ç–∫—Ä–∞–Ω–µ input, –∫—É–¥–∞ –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å–∏–º–≤–æ–ª—ã.
// // –û—Ç–∫—Ä–æ–π—Ç–µ Network/ fetch/XHR –∏ –ø–æ—Ä–æ–±—É–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Å–∏–º–≤–æ–ª—ã
// // –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–≤–æ–¥–∏—Ç–µ —É—Ö–æ–¥—è—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä -
// // —ç—Ç–æ –ø–ª–æ—Ö–æ.

// // ü™õ –ó–∞–¥–∞—á–∞: –ü–æ—á–∏–Ω–∏—Ç—å debounce
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å
// // –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏

// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: value={name(1500)}




// import ReactDOM from "react-dom/client";
// import React, { useEffect } from "react";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";

// // Reducer
// const initState = { find: "", words: [] as string[] };
// type InitStateType = typeof initState;

// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "SET_FIND":
//       return { ...state, find: action.find };
//     case "SET_WORDS":
//       return { ...state, words: action.words };
//     default:
//       return state;
//   }
// };

// // Store
// const rootReducer = combineReducers({ app: appReducer });

// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// const setFind = (find: string) => ({ type: "SET_FIND", find }) as const;
// const setWords = (words: string[]) => ({ type: "SET_WORDS", words }) as const;
// type ActionsType = ReturnType<typeof setFind> | ReturnType<typeof setWords>;

// // Components
// const defWords = ["a", "ab", "abc", "b", "bc", "c", "d", "ac", "bcd", "cd", "abcd", "bd"];

// export const App = () => {
//   const find = useAppSelector((state) => state.app.find);
//   const words = useAppSelector((state) => state.app.words);

//   const dispatch = useAppDispatch();

//   useEffect(() => {
//     dispatch(setWords(defWords));
//   }, []);

//   const mapped = words
//     .filter((w: string) => new RegExp(find, "gi").test(w))
//     .map((w: string, i: number) => <div key={i}>{w}</div>);

//   const onChangeHandler = (value: string) => {
//     dispatch(setFind(value)) // –û–¢–í–ï–¢!!!

//     console.log(value);
//   };

//   return (
//     <div>
//       <input value={find} onChange={(e) => onChangeHandler(e.target.value)} />
//       {mapped}
//     </div>
//   );
// };

// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// );

// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ù–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤.
// // –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–æ—á–∏–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é:
// // –≤–≤–æ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã –≤ input –∏ —Å—Ä–∞–∑—É –≤–∏–¥–∏—Ç–µ –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ.
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏.
// //
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: dispatch(setFind(defWords))





// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return instance.get('users=pageSize=3=pageNumber=2')





// import React, { useEffect } from "react";
// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import axios from "axios";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";

// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// };

// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });

// const api = {
//   getUsers(pageNumber: number) {
//     return instance.get(`users?pageSize=${3}&pageNumber=${pageNumber}`);
//   },
// };

// // Reducer
// const initState = { page: 1, users: [] as UserType[] };
// type InitStateType = typeof initState;

// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "SET_PAGE":
//       return { ...state, page: action.page };
//     case "SET_USERS":
//       return { ...state, users: action.users };
//     default:
//       return state;
//   }
// };

// // Store
// const rootReducer = combineReducers({ app: appReducer });

// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// const setPageAC = (page: number) => ({ type: "SET_PAGE", page }) as const;
// const setUsersAC = (users: UserType[]) => ({ type: "SET_USERS", users }) as const;
// type ActionsType = ReturnType<typeof setPageAC> | ReturnType<typeof setUsersAC>;

// const getUsers = (): AppThunk => (dispatch, getState) => {
//   const page = getState().app.page //–û–¢–í–ï–¢!!!
//   api.getUsers(page).then((res) => dispatch(setUsersAC(res.data.items)));
// };

// // Components
// export const App = () => {
//   const page = useAppSelector((state) => state.app.page);
//   const users = useAppSelector((state) => state.app.users);

//   const dispatch = useAppDispatch();

//   useEffect(() => {
//     dispatch(getUsers());
//   }, [page]);

//   const pages = new Array(4).fill(1).map((p, i) => (
//     <button key={i} onClick={() => dispatch(setPageAC(i + 1))} disabled={page === i + 1}>
//       {i + 1}
//     </button>
//   ));

//   return (
//     <div>
//       {users.map((u) => {
//         return (
//           <div style={{ marginBottom: "25px" }} key={u.id}>
//             <p>
//               <b>name</b>: {u.name}
//             </p>
//             <p>
//               <b>age</b>: {u.age}
//             </p>
//           </div>
//         );
//       })}
//       {pages}
//     </div>
//   );
// };

// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// );

// // // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –¥–æ–ª–∂–Ω—ã –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å—Å—è –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
// // // –û–¥–Ω–∞–∫–æ –≤ –∫–æ–¥–µ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∏ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è –æ–¥–Ω–∏ –∏ —Ç–µ–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
// // // –ó–∞–¥–∞—á–∞: –Ω–∞–π—Ç–∏ —ç—Ç—É –æ—à–∏–±–∫—É, –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// // // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {pages.next()}




// –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨, –ö–û–ì–î–ê –°–î–ê–ú –≠–ö–ó–ê–ú–ï–ù–´ –í–°–ï!!!!


